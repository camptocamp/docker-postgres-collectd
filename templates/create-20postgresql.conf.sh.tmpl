#!/bin/sh

OUTPUT=/etc/collectd/collectd.conf.d/20postgresql.conf
DBLIST_QUERY="SELECT datname FROM pg_database WHERE datistemplate = false AND datallowconn = true AND datname NOT IN ('postgres', 'rdsadmin');"

PGFCT_QUERY="$(cat << EOF
CREATE OR REPLACE FUNCTION pg_lsn_to_bytes(lsn pg_lsn)
        RETURNS bigint AS
    \$\$
    DECLARE
        offset1 text;
        xlog1 text;
        result bigint;
    BEGIN
        xlog1=split_part(\$1::text,'/',1);
        offset1=split_part(\$1::text,'/',2);
        EXECUTE 'SELECT (x'''||'FF000000'||'''::bigint * x'''||xlog1||'''::bigint
                                  + x'''||offset1||'''::bigint)' INTO result;
        RETURN result;
    END;
    \$\$
    LANGUAGE plpgsql IMMUTABLE STRICT;
EOF
)"

echo '<Plugin "postgresql">' > $OUTPUT

{{ $containers := getvs "/containers/*/name" -}}
{{ range $containers -}}
  {{ $contname := . -}}
  {{ $label := printf "/containers/%s/labels/com.camptocamp.monitoring.postgres" $contname -}}
  {{ $monitor := getv $label "false" -}}
  {{ if eq $monitor "true" }}
    {{ $stack_name := printf "/containers/%s/stack_name" $contname -}}
    {{ $service_name := printf "/containers/%s/service_name" $contname -}}
    {{ $stack := getv $stack_name -}}
    {{ $service := getv $service_name -}}
    {{ $user_path := printf "/stacks/%s/services/%s/metadata/credentials/user" $stack $service }}
    {{ $password_path := printf "/stacks/%s/services/%s/metadata/credentials/password" $stack $service }}
    {{ $user := getv $user_path "postgres" -}}

cat <<EOF >> $OUTPUT
  <Database postgres>
    Instance "{{ $contname }}"
    Host "{{ $contname }}"
    Port "5432"
    User "{{ $user }}"
    {{ if exists $password_path -}}
    Password "{{ getv $password_path }}"
    {{ end }}
    Query replication_lag
    Query replication_write_lag
    Query replication_flush_lag
    Query replication_replay_lag
    Query replication_slots
    Query current_xlog_location
    Query last_xlog_receive_location
    Query last_xlog_replay_location
    Query settings
  </Database>

EOF

export PGHOST="{{ $service }}.{{ $stack }}"
export PGUSER="{{ $user }}"
export PGDATABASE="template1"
{{ if exists $password_path -}}
export PGPASSWORD="{{ getv $password_path }}"
{{ end -}}

echo "$PGFCT_QUERY"  | psql
echo "$DBLIST_QUERY" | psql -At | while read database; do

cat <<EOF >> $OUTPUT
  <Database $database>
    Instance "{{ $contname }}_$database"
    Host "{{ $contname }}"
    Port "5432"
    User "{{ $user }}"
    {{ if exists $password_path -}}
    Password "{{ getv $password_path }}"
    {{ end }}
    Query backends
    Query transactions
    Query queries
    Query query_plans
    Query table_states
    Query disk_io
    Query disk_usage
    Query pg_locks
    Query worker_state
    Query database_errors
    Query pg_vacuum_analyze
  </Database>

EOF

done

  {{ end -}}
{{ end -}}

{{ range $stack := lsdir "/stacks" -}}
  {{ $services := printf "/stacks/%s/services" $stack -}}
  {{ range $service := lsdir $services -}}
  {{ $kind := printf "/stacks/%s/services/%s/kind" $stack $service -}}
  {{ $_kind := getv $kind -}}
  {{ if eq $_kind "externalService" -}}
    {{ $label := printf "/stacks/%s/services/%s/labels/com.camptocamp.monitoring.postgres" $stack $service -}}
    {{ $monitor := getv $label "false" -}}
    {{ if eq $monitor "true" }}
      {{ $user_path := printf "/stacks/%s/services/%s/metadata/credentials/user" $stack $service }}
      {{ $password_path := printf "/stacks/%s/services/%s/metadata/credentials/password" $stack $service }}
      {{ $user := getv $user_path "postgres" -}}

      {{ if eq "null" (getv (printf "/stacks/%s/services/%s/hostname" $stack $service)) -}}
        {{ range $external_ip := ls (printf "/stacks/%s/services/%s/external_ips" $stack $service) -}}
          {{ if (not (eq "stacks" $external_ip)) -}}
            {{ $hostname := getv (printf "/stacks/%s/services/%s/external_ips/%s" $stack $service $external_ip) -}}
cat <<EOF >> $OUTPUT
  <Database postgres>
    Instance "{{ $hostname }}"
    Host "{{ $hostname }}"
    Port "5432"
    User "{{ $user }}"
    {{ if exists $password_path -}}
    Password "{{ getv $password_path }}"
    {{ end -}}
    Query replication_lag
    Query replication_write_lag
    Query replication_flush_lag
    Query replication_replay_lag
    Query replication_slots
    Query current_xlog_location
    Query last_xlog_receive_location
    Query last_xlog_replay_location
    Query settings
  </Database>

EOF

export PGHOST="{{ $hostname }}"
export PGUSER="{{ $user }}"
export PGDATABASE="template1"
{{ if exists $password_path -}}
export PGPASSWORD="{{ getv $password_path }}"
{{ end -}}

echo "$PGFCT_QUERY"  | psql
echo "$DBLIST_QUERY" | psql -At | while read database; do

cat <<EOF >> $OUTPUT
  <Database $database>
    Instance "{{ $hostname }}_$database"
    Host "{{ $hostname }}"
    Port "5432"
    User "{{ $user }}"
    {{ if exists $password_path -}}
    Password "{{ getv $password_path }}"
    {{ end -}}
    Query backends
    Query transactions
    Query queries
    Query query_plans
    Query table_states
    Query disk_io
    Query disk_usage
    Query pg_locks
    Query worker_state
    Query database_errors
    Query pg_vacuum_analyze
  </Database>

EOF

done
            {{ end -}}
          {{ end -}}
        {{ else -}}
cat <<EOF >> $OUTPUT
  <Database postgres>
    Instance "{{ $service }}.{{ $stack }}"
    Host "{{ $service }}.{{ $stack }}"
    Port "5432"
    User "{{ $user }}"
    {{ if exists $password_path -}}
    Password "{{ getv $password_path }}"
    {{ end -}}
    Query replication_lag
    Query replication_write_lag
    Query replication_flush_lag
    Query replication_replay_lag
    Query replication_slots
    Query current_xlog_location
    Query last_xlog_receive_location
    Query last_xlog_replay_location
    Query settings
  </Database>

EOF

export PGHOST="{{ $service }}.{{ $stack }}"
export PGUSER="{{ $user }}"
export PGDATABASE="template1"
{{ if exists $password_path -}}
export PGPASSWORD="{{ getv $password_path }}"
{{ end -}}

echo "$PGFCT_QUERY"  | psql
echo "$DBLIST_QUERY" | psql -At | while read database; do

cat <<EOF >> $OUTPUT
  <Database $database>
    Instance "{{ $service }}.{{ $stack }}_$database"
    Host "{{ $service }}.{{ $stack }}"
    Port "5432"
    User "{{ $user }}"
    {{ if exists $password_path -}}
    Password "{{ getv $password_path }}"
    {{ end -}}
    Query backends
    Query transactions
    Query queries
    Query query_plans
    Query table_states
    Query disk_io
    Query disk_usage
    Query pg_locks
    Query worker_state
    Query database_errors
    Query pg_vacuum_analyze
  </Database>

EOF

done
        {{ end -}}
      {{ end -}}
    {{ end -}}
  {{ end -}}
{{ end }}

echo '</Plugin>' >> $OUTPUT
